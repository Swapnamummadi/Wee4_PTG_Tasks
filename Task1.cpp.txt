//Task 1: Working with STL Algorithms 

//Goal: Practice commonly used STL algorithms in the context of managing HMI control states (e.g., button visibility, slider values). 

//Scenario: 

//Imagine an HMI dashboard with buttons and sliders. Each control has a unique ID and a state (visible, invisible, disabled). 

//Steps: 

//Define the data structure: 

//Create a struct Control: 

//cppCopy codestruct Control {    int id;               // Unique ID    std::string type;     // "button" or "slider"    std::string state;    // "visible", "invisible", "disabled"};  

//Initialize the container: 

//Create a std::vector<Control> and populate it with sample controls (5 buttons and 5 sliders). 

//Use the following algorithms: 

//std::for_each: Iterate through all controls and print their details. 

//std::find: Find a control with a specific ID. 

//std::find_if: Find the first invisible control. 

//std::adjacent_find: Check for consecutive controls with the same state. 

//std::count: Count the number of visible controls. 

//std::count_if: Count sliders that are disabled. 

//std::equal: Compare two subranges of controls to check if they are identical. 

//Implementation Example: 

//cppCopy codeauto invisibleControl = std::find_if(controls.begin(), controls.end(),    [](const Control& ctrl) { return ctrl.state == "invisible"; });  

//Output Results: 

//Print the results of each algorithm in a user-friendly format. 

 
#include <bits/stdc++.h> 

using namespace std; 

struct Control 

{ 

    int id; 

    string type; 

    string state; 

    bool operator ==(const Control& ctrl) 

    { 

        return id == ctrl.id; 

    } 

}; 

int main() 

{ 

    vector<Control> ctrl = { 

        {1, "Button", "visible"}, 

{2, "Slider", "invisible"}, 

{3, "Slider", "disabled"}, 

{4, "Button", "disabled"}, 

{5, "Slider","invisible"}, 

{6, "Button", "visible"}, 

{7, "Slider", "disabled"}, 

{8, "Button", "invisible"}, 

{9, "Slider", "visible"}, 

{10, "Button", "disabled"} 

    }; 

     

    cout<<".........................Iterate through all controls and printing their details................."<<endl; 

    cout<<endl; 

    for_each(ctrl.begin(), ctrl.end(), [](Control& ctrls) 

    { 

        cout<<"Control Id: "<<ctrls.id<<", Control Type: "<<ctrls.type<<", Control State: "<<ctrls.state<<endl; 

    }); 

    cout<<".........................Finding a control with a specific id........................ "<<endl; 

    int targetId; 

    cout<<"Enter Target Id: "<<endl; 

    cin>>targetId; 

    Control target = {targetId, "", ""}; 

    auto it = find(ctrl.begin(), ctrl.end(),target); 

    if(it != ctrl.end()) 

    { 

        cout<<"Targetted Id: "<<targetId<<", TargetIdType: "<<it->type<<", TargettedIdState: "<<it->state<<endl; 

    } 

    else 

    { 

        cout<<"TargettedId "<<targetId<<" is not found!..."<<endl; 

    } 

    cout<<"............................................................................................."<<endl; 

    cout<<".................................Finding the first invisible state in control...................................."<<endl; 

    auto invisibleFound = find_if(ctrl.begin(), ctrl.end(), [](const Control& ctrls) 

    { 

        return ctrls.state == "invisible"; 

    }); 

    if(invisibleFound != ctrl.end()) 

    { 

        cout<<"invisible Found!!\n"<<"Id: "<<invisibleFound->id<<", Type: "<<invisibleFound->type<<endl; 

    } 

    else 

    { 

        cout<<"invisible not Found!!"<<endl; 

    } 

 

    cout<<"..........................................Adjacent Finding with same state........................"<<endl; 

     

    auto adjacentFind = adjacent_find(ctrl.begin(), ctrl.end(), [](Control ctrl1, Control ctrl2) 

    {return ctrl1.state == ctrl2.state;});  

     

    if(adjacentFind != ctrl.end()) 

    { 

        cout<<"ID1 "<<adjacentFind->id<<", Type1 "<<adjacentFind->type<<", State1 "<<adjacentFind->state; 

        cout<<"\nID2 "<<(adjacentFind + 1)-> id<<", Type2 "<<(adjacentFind + 1)->type<<", State "<<(adjacentFind + 1)->state<<endl; 

    } 

    else 

    { 

        cout<<"No Adjacent Id's are found..."<<endl; 

    } 

     

    cout<<".....................Counting the number of visibles.................."<<endl; 

    vector<string> states; 

    for(auto ele : ctrl) 

    { 

        states.push_back(ele.state); 

    } 

    int visibleCount = count(states.begin(), states.end(), "visible"); // Use Control with the state "Visible" 

    cout << "The 'Visible' controls occur " << visibleCount << " times." << endl; 

    cout<<"........................Counting sliders that are disabled........................."<<endl; 

    int countIf = count_if(ctrl.begin(), ctrl.end(), [](Control ctrls) 

    {return ctrls.type == "Slider" && ctrls.state == "disabled";}); 

    cout<<countIf<<endl; 

    cout<<".................Equal Sub Ranges..................."<<endl;     

    if (ctrl.size() >= 6)  

    { 

        bool areEqual = equal(ctrl.begin(), ctrl.begin() + 5, ctrl.begin() + 5); 

        cout << "\nThe first 5 controls and the next 5 controls are " << (areEqual ? "identical." : "not identical.") << endl; 

    }  

    else  

    { 

        cout << "\nNot enough controls to compare." << endl; 

    }  

    return 0; 

} 

